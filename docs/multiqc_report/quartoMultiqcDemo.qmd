---
title: "Quarto MultiQC demo"

format:
  html:
    embed-resources: true
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Setup

```{python}
#| echo: false
#| tags: [parameters]

log_path = 'log_files'
```

<details>
<summary>MultiQC Log parse</summary>
```{python}
#| output: true
import multiqc
from pprint import pprint
multiqc.reset() # Important for Quarto preview
# Then load a custom config using multiqc.load_config("multiqc_config_illumina.yml")
# The path appears to be relative to the current notebook location.
multiqc.parse_logs(log_path)
```
</details>

## FastQC

```{python}
# pprint pretty prints the dictionary
pprint(multiqc.list_plots())
```

### Sequence counts

```{python}
#| echo: false
fastqc_counts_plot = multiqc.get_plot("fastqc",'Sequence Counts')
fastqc_counts_plot.show()
```

```{python}
#| echo: false
fastqc_seqgc_plot = multiqc.get_plot("fastqc",'Per Sequence GC Content')
fastqc_seqgc_plot.show()
```

## Genomescope

Render Genomescope
```{python}
#| echo: false
#| output: asis
import glob
import os

images = [ img for pattern in ['log_plot', 'linear_plot'] for img in glob.glob(f"{log_path}/*_{pattern}.png") ]

# Ensure we have multiples of 4 images
if len(images) == 0:
    raise ValueError("No files found")

# Ensure we have multiples of 4 images
if len(images) % 4 != 0:
    raise ValueError("Exact multiples of 4 images are required.")

# Function to sort filenames
def sort_key(filename):
    filename = os.path.basename(filename)
    parts = filename.split('_')
    # Order: linear < log, non-transformed < transformed
    order = {'linear': 0, 'log': 1}
    transformed = 1 if 'transformed' in parts else 0
    return (parts[0], transformed, order[parts[-2]])

# Grouping and sorting filenames
from itertools import groupby

# Sort filenames first
sorted_filenames = sorted(images, key=sort_key)

# Group by sample
grouped_filenames = {}
for key, group in groupby(sorted_filenames, key=lambda x: os.path.basename(x).split('_')[0]):
    grouped_filenames[key] = list(group)

# Function to format filenames
def format_filename(filename):
    return os.path.basename(filename).replace('.png', '').replace('_', ' ')

# Print grouped and sorted filenames
tabs = [] # tabbed panels
for sample, files in grouped_filenames.items():
    tabs.append(f"### {sample}")
    tabs.append("::: {.panel-tabset}")
    for image in files:
        formatted_filename = format_filename(image)
        tabs.append(f"## {formatted_filename}")
        tabs.append(f"![{formatted_filename}]({image})")
    tabs.append(":::")
print("\n\n".join(tabs))
```

## Versions

```{python}
print(multiqc.__version__)
```
