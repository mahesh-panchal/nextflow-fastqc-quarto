---
title: "Quarto MultiQC demo"

format:
  html:
    embed-resources: true
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Setup

```{python}
#| echo: false
#| tags: [parameters]

log_path = 'results'
```

<details>
<summary>MultiQC Log parse</summary>
```{python}
#| output: true
import multiqc
from pprint import pprint
multiqc.reset() # Important for Quarto preview
# Then load a custom config using multiqc.load_config("multiqc_config_illumina.yml")
# The path appears to be relative to the current notebook location.
multiqc.parse_logs(log_path)
```
</details>

## FastQC

```{python}
# pprint pretty prints the dictionary
pprint(multiqc.list_plots())
```

### Sequence counts

```{python}
#| echo: false
fastqc_counts_plot = multiqc.get_plot("fastqc",'Sequence Counts')
fastqc_counts_plot.show()
```

```{python}
#| echo: false
fastqc_seqgc_plot = multiqc.get_plot("fastqc",'Per Sequence GC Content')
fastqc_seqgc_plot.show()
```

## Genomescope

Render Genomescope
```{python}
#| echo: false
#| output: asis
import glob

# Define the glob pattern to find images
image_pattern = f"{log_path}/genomescope2/*.png"  # Adjust the pattern to match your images
images = glob.glob(image_pattern)

# Ensure we have exactly 4 images
if len(images) % 4 != 0:
    raise ValueError("Exact multiples of 4 images are required.")

# Generate Quarto Markdown for the tabbed panel
tabs = []
for i, image in enumerate(images):
    if i % 4 == 0: 
        tabs.append("::: {.panel-tabset}")
    tabs.append(f"## Tab {i+1}\n\n![Image {i+1}](/{image})")
    if i % 4 == 3: 
        tabs.append(":::")

print("\n\n".join(tabs))
```

## Versions

```{python}
print(multiqc.__version__)
```
